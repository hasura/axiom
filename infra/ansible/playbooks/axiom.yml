---
# Axiom Demo Setup Playbook
#
# This playbook sets up the Axiom demo environment by:
# 1. Installing prerequisites (DDN)
# 2. Configuring Docker
# 3. Setting up the demo files and starting containers
#
# Smart Container Management:
# - Starts containers if they're not already running
# - Ignores containers if they're already running
# - Option to force a complete reinstall
#
# Variables:
# - auto_start_demo: When true, automatically starts the demo containers if they're not already running
# - force_clean: When true, forces a complete cleanup of all containers and volumes before starting
#
# Usage:
# - Normal run: ansible-playbook -i inventory.yml playbooks/axiom.yml
#   (Starts containers if not running, ignores if already running)
# - Force clean: ansible-playbook -i inventory.yml playbooks/axiom.yml -e "force_clean=true"
#   (Deletes everything and starts again)

- name: Install prerequisites for Axiom
  import_playbook: ddn.yml

- name: Configure Docker for Axiom
  import_playbook: configure_docker.yml

- name: Clone and configure Axiom repository
  hosts: demo_servers
  become: true
  vars:
    auto_start_demo: true   # set to true to start containers if not running
    force_clean: false      # set to true to delete everything and start again
  tasks:
    - name: Ensure git is installed
      ansible.builtin.apt:
        name: git
        state: present

    - name: Ensure git-lfs is installed
      ansible.builtin.apt:
        name: git-lfs
        state: present

    - name: Ensure /home/ubuntu/axiom-data base directory exists
      ansible.builtin.file:
        path: /home/ubuntu/axiom-data
        owner: ubuntu
        group: ubuntu
        mode: "0755"
        state: directory

    - name: Ensure /home/ubuntu/axiom-data/<profile> exists
      ansible.builtin.file:
        path: /home/ubuntu/axiom-data/{{ demo_profile }}
        owner: ubuntu
        group: ubuntu
        mode: "0755"
        state: directory

    - name: Upload demo profile from .data directory
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../../../.data/{{ demo_profile }}/"
        dest: "/home/ubuntu/axiom-data/{{ demo_profile }}/"
        recursive: true
        delete: true
        checksum: true
        rsync_opts:
          - "--exclude=.*"
      delegate_to: localhost
      become: false

    - name: Load environment variables from .env
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../.env"
        name: env_vars

    - name: Setup environment variables from Ansible -> Docker
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/env_vars.j2"
        dest: "/home/ubuntu/axiom-data/{{ demo_profile }}/.env"
        owner: ubuntu
        group: ubuntu
        mode: "0600"

    - name: Check if Docker is running
      ansible.builtin.command: docker info
      register: docker_info
      changed_when: false
      failed_when: false

    - name: Set Docker running status
      ansible.builtin.set_fact:
        docker_running: "{{ docker_info.rc == 0 }}"

    - name: Check if any compose services are running
      ansible.builtin.shell: docker compose ps -q || echo ""
      args:
        chdir: "/home/ubuntu/axiom-data/{{ demo_profile }}"
      register: compose_services
      changed_when: false
      failed_when: false

    - name: Debug compose services output
      ansible.builtin.debug:
        msg: "Compose services output: '{{ compose_services.stdout | replace('\n', '\\n') }}' (length: {{ compose_services.stdout | length }})"

    - name: Check for running containers in the demo project
      ansible.builtin.shell: >
        docker ps --filter "name=axiom" --format "{% raw %}{{.Names}}{% endraw %}" || echo ""
      register: running_containers
      changed_when: false
      failed_when: false

    - name: Debug running containers output
      ansible.builtin.debug:
        msg: "Running containers output: '{{ running_containers.stdout | replace('\n', '\\n') }}' (length: {{ running_containers.stdout | length }})"

    - name: Set Docker status facts
      ansible.builtin.set_fact:
        compose_services_running: "{{ compose_services.stdout | default('') | length > 0 }}"
        containers_running: "{{ running_containers.stdout | default('') | length > 0 }}"

    - name: Display Docker status
      ansible.builtin.debug:
        msg: >-
          üê≥ Docker Status: Service running: {{ docker_running }},
          Compose services running: {{ compose_services_running }},
          Containers running: {{ containers_running }}

    - name: Stop all Docker containers if force_clean is enabled
      community.docker.docker_compose_v2:
        project_src: /home/ubuntu/axiom-data/{{ demo_profile }}
        files:
          - compose.yaml
        state: absent
        remove_volumes: true
      when: force_clean | bool
      tags: ['force_clean']

    - name: Turn on the demo (start if not running or after force_clean)
      community.docker.docker_compose_v2:
        project_src: /home/ubuntu/axiom-data/{{ demo_profile }}
        files:
          - compose.yaml
        build: always
        pull: always
        state: present
        remove_orphans: true
      when: >-
        force_clean | bool or
        (auto_start_demo | bool and not compose_services_running | bool)
      tags: ['start']
      ignore_errors: >-
        {{ not force_clean | bool }}
      register: start_result

    - name: Display message when containers are already running
      ansible.builtin.debug:
        msg: >-
          ‚ÑπÔ∏è Docker containers for this demo are already running.
          üîÑ To force a complete reinstall, run with: -e "force_clean=true"
      when: >-
        containers_running | bool and
        not force_clean | bool

    - name: Display success message
      ansible.builtin.debug:
        msg: >-
          ‚úÖ Demo setup completed successfully!
          {% if force_clean | bool %}‚ö†Ô∏è All containers were stopped and restarted cleanly.
          {% elif start_result is defined and start_result.changed %}üöÄ New containers started.
          {% else %}‚ÑπÔ∏è No changes to running containers.{% endif %}
      when: >-
        not (containers_running | bool and
        not force_clean | bool)

    - name: Get running containers
      ansible.builtin.shell: >
        docker ps --filter "name=axiom" --format "{% raw %}{{.Names}}{% endraw %}"
      register: running_containers_list
      changed_when: false
      when: containers_running | bool or (start_result is defined and start_result.changed)

    - name: Display running containers
      ansible.builtin.debug:
        msg: "üê≥ Running container names: {{ running_containers_list.stdout | default('No containers running') | replace('\n', ', ') }}"
      when: containers_running | bool or (start_result is defined and start_result.changed)
