kind: Context
version: v3
definition:
  current: telco
  contexts:
    axiom-starter:
      project: axiom-starter
      supergraph: ../supergraph-config/starter/2-supergraph.yaml
      subgraph: ../industry/telco/customer/subgraph.yaml
      localEnvFile: ../.env.starter
      cloudEnvFile: ../.env.cloud.starter
    telco:
      project: telco
      supergraph: ../supergraph-config/telco/4-supergraph-with-mutations.yaml
      subgraph: ../industry/telco/customer/subgraph.yaml
      localEnvFile: ../.env.telco
      cloudEnvFile: ../.env.cloud.telco
    telco-test:
      project: telco-test
      supergraph: ../supergraph-config/telco/4-supergraph-with-mutations.yaml
      subgraph: ../industry/telco/customer/subgraph.yaml
      localEnvFile: ../.env.telco
      cloudEnvFile: ../.env.cloud.telco-test
  scripts:
    build-starter:
      bash: ddn supergraph build local --env-file .env.starter --env-file .env --supergraph supergraph-config/starter/2-supergraph.yaml
      powershell: ddn supergraph build local --env-file .env.starter --env-file .env --supergraph supergraph-config/starter/2-supergraph.yaml
    build-telco:
      bash: ddn supergraph build local --supergraph supergraph-config/telco/4-supergraph-with-mutations.yaml
      powershell: ddn supergraph build local  --supergraph supergraph-config/telco/4-supergraph-with-mutations.yaml
    demo-fsi:
      bash: export DATASET=fsi; echo "not yet implemented"
      powershell: $Env:DATASET = "fsi"; Write-Output "not yet implemented"
    demo-healthcare:
      bash: export DATASET=hc; echo "not yet implemented"
      powershell: $Env:DATASET = "hc"; Write-Output "not yet implemented"
    demo-starter:
      bash: ddn run docker-start-starter; HASURA_DDN_PAT=$(ddn auth print-pat) docker compose -f compose-starter.yaml up --build --pull always -d
      powershell: $Env:HASURA_DDN_PAT = ddn auth print-pat; docker compose -f compose-starter.yaml up --build --pull always -d
    demo-telco:
      bash: ddn run docker-start-telco; HASURA_DDN_PAT=$(ddn auth print-pat) docker compose -f compose-telco.yaml --env-file .env.telco up --build --pull always -d
      powershell: $Env:HASURA_DDN_PAT = ddn auth print-pat; docker compose -f compose-telco.yaml --env-file .env.telco up --build --pull always -d
    docker-start-starter:
      bash: export DATASET=starter; docker compose -f ../.data/starter/compose.yaml --env-file ../.data/starter/.env up --build --pull always -d
      powershell: $Env:DATASET = "starter"; docker compose -f ../.data/starter/compose.yaml --env-file ../.data/starter/.env up --build --pull always -d
    docker-start-telco:
      bash: export DATASET=telco; docker compose -f ../.data/telco/compose.yaml --env-file ../.data/telco/.env up --build --pull always -d
      powershell: $Env:DATASET = "starter"; docker compose -f ../.data/telco/compose.yaml --env-file ../.data/telco/.env up --build --pull always -d
    docker-stop:
      bash: for file in compose*.yaml $(find ../.data -type f -name "compose.yaml"); do docker compose -f $file down -v; done
      powershell: docker compose -f compose.yaml down -v; docker compose -f .data/compose.yaml down -v
