name: Create PromptQL Build

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "demos/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect all changed demos
        id: demo-setup
        run: |
          # Debug: Let's see what we've got
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "HEAD~1: $(git rev-parse HEAD~1 2>/dev/null || echo 'N/A')"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Event name: ${{ github.event_name }}"

          # Fetch the base branch
          git fetch origin ${{ github.base_ref }}

          # For incremental builds, we want to compare against the previous commit
          # But we need to handle the GitHub Actions checkout context properly
          if [ "${{ github.event_name }}" = "pull_request" ] && git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            echo "Comparing against previous commit for incremental build"
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
          else
            echo "Fallback: comparing against base branch"
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          CHANGED_DEMOS=$(echo "$CHANGED_FILES" | grep '^demos/' | cut -d'/' -f2 | sort -u)

          echo "Changed demos:"
          echo "$CHANGED_DEMOS"

          if [ -z "$CHANGED_DEMOS" ]; then
            echo "No demo changes detected"
            exit 1
          fi

          echo "demos<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_DEMOS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install DDN CLI
        run: |
          curl -L https://graphql-engine-cdn.hasura.io/ddn/cli/v4/get.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify DDN CLI installation
        run: ddn --version

      - name: Load secrets from 1Password
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          # AML secrets
          AML_HASURA_DDN_PAT: "op://Product ACT/axiom_aml/ddn-service-account"
          AML_JWT_SECRET: "op://Product ACT/axiom_aml/JWT_SECRET"
          AML_APP_AML_MONITORING_MONGODB_DATABASE_URI:
            "op://Product ACT/axiom_aml/APP_AML_MONITORING_MONGODB_DATABASE_URI"
          AML_APP_BANKING_CORE_JDBC_URL: "op://Product ACT/axiom_aml/APP_BANKING_CORE_JDBC_URL"
          # GTM secrets
          GTM_HASURA_DDN_PAT: "op://Product ACT/axiom_gtm/ddn-service-account"
          GTM_JWT_SECRET: "op://Product ACT/axiom_gtm/JWT_SECRET"
          GTM_OPERATIONS_AUTH_JDBC_URL: "op://Product ACT/axiom_gtm/OPERATIONS_AUTH_JDBC_URL"
          GTM_REVOPS_CLARI_JDBC_URL: "op://Product ACT/axiom_gtm/REVOPS_CLARI_JDBC_URL"
          GTM_REVOPS_SALESFORCE_JDBC_URL: "op://Product ACT/axiom_gtm/REVOPS_SALESFORCE_JDBC_URL"
          # Healthcare secrets
          HEALTHCARE_HASURA_DDN_PAT: "op://Product ACT/axiom_healthcare/ddn-service-account"
          HEALTHCARE_JWT_SECRET: "op://Product ACT/axiom_healthcare/JWT_SECRET"
          HEALTHCARE_PATIENT_OPS_OPERATIONS_JDBC_URL:
            "op://Product ACT/axiom_healthcare/PATIENT_OPS_OPERATIONS_JDBC_URL"
          HEALTHCARE_PATIENT_OPS_PATIENTS_JDBC_URL: "op://Product ACT/axiom_healthcare/PATIENT_OPS_PATIENTS_JDBC_URL"
          HEALTHCARE_REFERENCE_REFERENCE_JDBC_URL: "op://Product ACT/axiom_healthcare/REFERENCE_REFERENCE_JDBC_URL"
          # Diligence secrets
          DILIGENCE_HASURA_DDN_PAT: "op://Product ACT/axiom_diligence/ddn-service-account"
          DILIGENCE_JWT_SECRET: "op://Product ACT/axiom_diligence/JWT_SECRET"
          DILIGENCE_ERP_FINANCIALS_JDBC_URL: "op://Product ACT/axiom_diligence/ERP_FINANCIALS_JDBC_URL"
          DILIGENCE_ERP_OPERATIONS_JDBC_URL: "op://Product ACT/axiom_diligence/ERP_OPERATIONS_JDBC_URL"
          # Supplychain secrets
          SUPPLYCHAIN_HASURA_DDN_PAT: "op://Product ACT/axiom_supplychain/ddn-service-account"
          SUPPLYCHAIN_JWT_SECRET: "op://Product ACT/axiom_supplychain/JWT_SECRET"
          SUPPLYCHAIN_ECOMMERCE_MONGODB_URI:
            "op://Product ACT/axiom_supplychain/ECOMMERCE_ECOMMERCE_MONGODB_MONGODB_DATABASE_URI"
          SUPPLYCHAIN_SCMS_POSTGRES_JDBC_URL: "op://Product ACT/axiom_supplychain/SCMS_SCMS_POSTGRES_JDBC_URL"
          SUPPLYCHAIN_SCMS_POSTGRES_JDBC_SCHEMAS: "op://Product ACT/axiom_supplychain/SCMS_SCMS_POSTGRES_JDBC_SCHEMAS"

      - name: Build all changed demos
        id: build
        run: |
          BUILDS_JSON="[]"

          while IFS= read -r demo; do
            echo "Building demo: $demo"
            
            # Load secrets for this specific demo using already loaded env vars
            case $demo in
              aml)
                export HASURA_DDN_PAT="$AML_HASURA_DDN_PAT"
                export JWT_SECRET="$AML_JWT_SECRET"
                export APP_AML_MONITORING_MONGODB_DATABASE_URI="$AML_APP_AML_MONITORING_MONGODB_DATABASE_URI"
                export APP_BANKING_CORE_JDBC_URL="$AML_APP_BANKING_CORE_JDBC_URL"
                ;;
              gtm)
                export HASURA_DDN_PAT="$GTM_HASURA_DDN_PAT"
                export JWT_SECRET="$GTM_JWT_SECRET"
                export OPERATIONS_AUTH_JDBC_URL="$GTM_OPERATIONS_AUTH_JDBC_URL"
                export REVOPS_CLARI_JDBC_URL="$GTM_REVOPS_CLARI_JDBC_URL"
                export REVOPS_SALESFORCE_JDBC_URL="$GTM_REVOPS_SALESFORCE_JDBC_URL"
                ;;
              healthcare)
                export HASURA_DDN_PAT="$HEALTHCARE_HASURA_DDN_PAT"
                export JWT_SECRET="$HEALTHCARE_JWT_SECRET"
                export PATIENT_OPS_OPERATIONS_JDBC_URL="$HEALTHCARE_PATIENT_OPS_OPERATIONS_JDBC_URL"
                export PATIENT_OPS_PATIENTS_JDBC_URL="$HEALTHCARE_PATIENT_OPS_PATIENTS_JDBC_URL"
                export REFERENCE_REFERENCE_JDBC_URL="$HEALTHCARE_REFERENCE_REFERENCE_JDBC_URL"
                ;;
              diligence)
                export HASURA_DDN_PAT="$DILIGENCE_HASURA_DDN_PAT"
                export JWT_SECRET="$DILIGENCE_JWT_SECRET"
                export ERP_FINANCIALS_JDBC_URL="$DILIGENCE_ERP_FINANCIALS_JDBC_URL"
                export ERP_OPERATIONS_JDBC_URL="$DILIGENCE_ERP_OPERATIONS_JDBC_URL"
                ;;
              supplychain)
                export HASURA_DDN_PAT="$SUPPLYCHAIN_HASURA_DDN_PAT"
                export JWT_SECRET="$SUPPLYCHAIN_JWT_SECRET"
                export ECOMMERCE_ECOMMERCE_MONGODB_MONGODB_DATABASE_URI="$SUPPLYCHAIN_ECOMMERCE_MONGODB_URI"
                export SCMS_SCMS_POSTGRES_JDBC_URL="$SUPPLYCHAIN_SCMS_POSTGRES_JDBC_URL"
                export SCMS_SCMS_POSTGRES_JDBC_SCHEMAS="$SUPPLYCHAIN_SCMS_POSTGRES_JDBC_SCHEMAS"
                ;;
              *)
                echo "Unknown demo: $demo - skipping"
                continue
                ;;
            esac
            
            cd demos/$demo
            ddn auth login --pat "$HASURA_DDN_PAT"
            
            # Create .env.cloud file
            case $demo in
              aml)
                cat > .env.cloud << EOF
          JWT_SECRET=$JWT_SECRET
          APP_AML_MONITORING_MONGODB_DATABASE_URI=$APP_AML_MONITORING_MONGODB_DATABASE_URI
          APP_BANKING_CORE_JDBC_URL=$APP_BANKING_CORE_JDBC_URL
          EOF
                ;;
              gtm)
                cat > .env.cloud << EOF
          JWT_SECRET=$JWT_SECRET
          OPERATIONS_AUTH_JDBC_URL=$OPERATIONS_AUTH_JDBC_URL
          REVOPS_CLARI_JDBC_URL=$REVOPS_CLARI_JDBC_URL
          REVOPS_SALESFORCE_JDBC_URL=$REVOPS_SALESFORCE_JDBC_URL
          EOF
                ;;
              healthcare)
                cat > .env.cloud << EOF
          JWT_SECRET=$JWT_SECRET
          PATIENT_OPS_OPERATIONS_JDBC_URL=$PATIENT_OPS_OPERATIONS_JDBC_URL
          PATIENT_OPS_PATIENTS_JDBC_URL=$PATIENT_OPS_PATIENTS_JDBC_URL
          REFERENCE_REFERENCE_JDBC_URL=$REFERENCE_REFERENCE_JDBC_URL
          EOF
                ;;
              diligence)
                cat > .env.cloud << EOF
          JWT_SECRET=$JWT_SECRET
          ERP_FINANCIALS_JDBC_URL=$ERP_FINANCIALS_JDBC_URL
          ERP_OPERATIONS_JDBC_URL=$ERP_OPERATIONS_JDBC_URL
          EOF
                ;;
              supplychain)
                cat > .env.cloud << EOF
          JWT_SECRET=$JWT_SECRET
          ECOMMERCE_ECOMMERCE_MONGODB_MONGODB_DATABASE_URI=$ECOMMERCE_ECOMMERCE_MONGODB_MONGODB_DATABASE_URI
          SCMS_SCMS_POSTGRES_JDBC_URL=$SCMS_SCMS_POSTGRES_JDBC_URL
          SCMS_SCMS_POSTGRES_JDBC_SCHEMAS=$SCMS_SCMS_POSTGRES_JDBC_SCHEMAS
          EOF
                ;;
            esac
            
            # Build this demo
            BUILD_OUTPUT=$(ddn supergraph build create --out json -d "PR #${{ github.event.number }}: ${{ github.event.pull_request.title }} ($demo)")
            
            # Add demo name to build output and append to array
            BUILD_WITH_DEMO=$(echo "$BUILD_OUTPUT" | jq ". + {\"demo\": \"$demo\"}")
            BUILDS_JSON=$(echo "$BUILDS_JSON" | jq ". += [$BUILD_WITH_DEMO]")
            
            cd ../..
          done <<< "${{ steps.demo-setup.outputs.demos }}"

          echo "builds_output<<EOF" >> $GITHUB_OUTPUT
          echo "$BUILDS_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const builds = JSON.parse(`${{ steps.build.outputs.builds_output }}`);

            let comment = `## ðŸš€ PromptQL Builds Complete\n\n`;

            builds.forEach(build => {
              comment += `### ${build.demo.toUpperCase()} Demo\n`;
              comment += `**Build Version:** \`${build.build_version || 'N/A'}\`\n`;
              comment += `**Project:** \`${build.project_name || 'pql-docs'}\`\n`;
              comment += `**PromptQL Playground:** ${build.promptql_url ? `[Open Playground](${build.promptql_url})` : 'N/A'}\n`;
              if (build.description) {
                comment += `**Description:** ${build.description}\n`;
              }
              comment += `\n`;
            });

            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸš€ PromptQL Builds Complete')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Notify Slack
        if: always()
        uses: actions/github-script@v7
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        with:
          script: |
            const builds = JSON.parse(`${{ steps.build.outputs.builds_output }}`);

            console.log('Environment check:');
            console.log('SLACK_BOT_TOKEN exists:', !!process.env.SLACK_BOT_TOKEN);
            console.log('SLACK_CHANNEL_ID:', process.env.SLACK_CHANNEL_ID);

            // Create message for each build
            let slackMessage = `ðŸš€ *PromptQL Builds Complete*\n\n`;

            builds.forEach(build => {
              slackMessage += `*${build.demo.toUpperCase()} Demo*\n`;
              slackMessage += `*Build Version:* \`${build.build_version || 'N/A'}\`\n`;
              slackMessage += `*Project:* \`${build.project_name || 'pql-docs'}\`\n`;
              slackMessage += `*PromptQL Playground:* ${build.promptql_url ? build.promptql_url : 'N/A'}\n`;
              if (build.description) {
                slackMessage += `*Description:* ${build.description}\n`;
              }
              slackMessage += `\n`;
            });

            // Check if thread exists in PR metadata
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            let threadTs = null;
            const threadComment = comments.data.find(comment => 
              comment.body.includes('<!-- slack-thread-ts:')
            );

            if (threadComment) {
              const match = threadComment.body.match(/<!-- slack-thread-ts:([^-]+) -->/);
              threadTs = match ? match[1] : null;
              console.log('Found existing thread:', threadTs);
            }

            if (!threadTs) {
              console.log('Creating new Slack thread...');
              const prAuthor = context.payload.pull_request.user.login;
              const prTitle = context.payload.pull_request.title;
              const prNumber = context.payload.pull_request.number;
              
              const initialMessage = `@${prAuthor} opened a PR Â»\n\n#${prNumber} ${prTitle}`;
              
              const response = await fetch('https://slack.com/api/chat.postMessage', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  channel: process.env.SLACK_CHANNEL_ID,
                  text: initialMessage,
                }),
              });

              const slackData = await response.json();
              console.log('Slack thread response:', JSON.stringify(slackData, null, 2));

              if (!slackData.ok) {
                console.error('Failed to create Slack thread:', slackData.error);
                return;
              }

              threadTs = slackData.ts;

              // Store thread timestamp in PR comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `<!-- slack-thread-ts:${threadTs} -->`
              });
            }

            // Only post to thread if we have a valid threadTs
            if (threadTs) {
              console.log('Posting build info to thread:', threadTs);
              const buildResponse = await fetch('https://slack.com/api/chat.postMessage', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  channel: process.env.SLACK_CHANNEL_ID,
                  thread_ts: threadTs,
                  text: slackMessage,
                }),
              });

              const buildData = await buildResponse.json();
              console.log('Slack build response:', JSON.stringify(buildData, null, 2));

              if (!buildData.ok) {
                console.error('Failed to post build info:', buildData.error);
              }
            } else {
              console.error('No valid thread timestamp available');
            }
